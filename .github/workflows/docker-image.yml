name: Build and Push Backend to ECR

on:
  workflow_dispatch: # for testing purposes
  push:
    branches:
      - main # Or your primary deployment branch, e.g., master, develop
  # You can also trigger on pull requests, releases, etc.
  # pull_request:
  #   branches:
  #     - main

env:
  IMAGE_TAG: ${{ github.sha }} # Use commit SHA for unique image tags, or 'latest'

jobs:
  build-and-push-image:
    name: Build and Push to ECR
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    environment: prod
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Always use the latest major version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # Or latest version
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_ECR }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2 # Or latest version

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # You can use Docker's build-push-action or execute Docker commands directly
        # Option 1: Using docker/build-push-action (recommended for simplicity)
        uses: docker/build-push-action@v5 # Or latest version
        with:
          context: . # Path to your Dockerfile and build context (e.g., ./backend)
          file: ./Dockerfile # Path to your Dockerfile, if not at the root of context
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_REPOSITORY }}:latest # Optional: also tag as latest

        # Option 2: Using Docker CLI commands (more explicit control)
        # run: |
        #   docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .
        #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #   # Optionally push a 'latest' tag
        #   docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Output Image URL
        run: echo "Image pushed to ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

      # Optional: Add a step to trigger a deployment on ECS or App Runner if needed
      # - name: Deploy to ECS
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: your-ecs-task-definition-family # e.g., my-backend-task
      #     service: your-ecs-service-name # e.g., my-backend-service
      #     cluster: your-ecs-cluster-name # e.g., my-cluster
      #     wait-for-service-stability: true
      #     # You might need to update the task definition with the new image URI
      #     # This can be done by preparing a new task definition JSON file
      #     # or using tools to update it dynamically.
