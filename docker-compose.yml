services:
  # FastAPI backend service
  backend:
    # Build configuration for the container
    build:
      # Set build context to the backend directory
      context: .
      # Specify the Dockerfile to use
      dockerfile: Dockerfile
    # Set a custom container name instead of auto-generated one
    container_name: senya_backend
    # Mount the local backend directory to /app in the container
    # This enables hot-reloading and direct code editing
    volumes:
      - .:/app
    # Port mapping - host_port:container_port
    # Access the API on localhost:8000
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    # Environment variables for the backend service
    environment:
      - DEBUG=1
      - SECRET_KEY=${SECRET_KEY}
      # Use environment variables from .env file
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Use service name 'db' as host - Docker's internal DNS will resolve this
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
    # Ensure database is started before backend
    depends_on:
      - db
    # Restart policy - container will restart unless manually stopped
    restart: unless-stopped

  # PostgreSQL database service
  db:
    # Use official PostgreSQL Alpine image - smaller and more secure
    image: postgres:15-alpine
    container_name: senya_db
    # Persist database data using named volume
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Environment variables for PostgreSQL
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # Expose PostgreSQL port - useful for external tools like pgAdmin
    ports:
      - "5432:5432"
    restart: unless-stopped
    # Health check ensures database is ready to accept connections
    healthcheck:
      # Command to test database availability
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      # How often to run the health check
      interval: 10s
      # How long to wait for the health check to complete
      timeout: 5s
      # How many retries before marking as unhealthy
      retries: 5

volumes:
  postgres_data: 